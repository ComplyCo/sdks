# coding: utf-8

"""
    ComplyCo SDK

    A REST API for working with ComplyCo data.

    The version of the OpenAPI document: 1.0.0
    Contact: support@complyco.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GettaskResponseBody(BaseModel):
    """
    GettaskResponseBody
    """ # noqa: E501
    cancelled_at: Optional[StrictStr] = None
    completed_at: Optional[StrictStr] = None
    document_name: Optional[StrictStr] = None
    expires_at: Optional[StrictStr] = None
    file_url: Optional[StrictStr] = None
    identity_email: Optional[StrictStr] = None
    identity_id: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    scroll_required: Optional[StrictBool] = None
    signature_required: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["cancelled_at", "completed_at", "document_name", "expires_at", "file_url", "identity_email", "identity_id", "message", "scroll_required", "signature_required"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GettaskResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GettaskResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancelled_at": obj.get("cancelled_at"),
            "completed_at": obj.get("completed_at"),
            "document_name": obj.get("document_name"),
            "expires_at": obj.get("expires_at"),
            "file_url": obj.get("file_url"),
            "identity_email": obj.get("identity_email"),
            "identity_id": obj.get("identity_id"),
            "message": obj.get("message"),
            "scroll_required": obj.get("scroll_required"),
            "signature_required": obj.get("signature_required")
        })
        return _obj


